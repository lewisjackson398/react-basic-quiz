{"version":3,"sources":["svg/logo.svg","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","index.js"],"names":["module","exports","quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","Transition","component","timeout","key","questionId","questionTotal","answerOptions","map","Result","CSSTransition","quizResult","App","state","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","src","logo","alt","renderResult","renderQuiz","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59542762.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.84287d09.svg\";","var quizQuestions = [\r\n    {\r\n        question: \"What franchise would you rather play a game from?\",\r\n        answers: [\r\n            {\r\n                type: \"Microsoft\",\r\n                content: \"Halo\"\r\n            },\r\n            {\r\n                type: \"Nintendo\",\r\n                content: \"Pokemon\"\r\n            },\r\n            {\r\n                type: \"Sony\",\r\n                content: \"Uncharted\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which console would you prefer to play with friends?\",\r\n        answers: [\r\n            {\r\n                type: \"Microsoft\",\r\n                content: \"X-Box\"\r\n            },\r\n            {\r\n                type: \"Nintendo\",\r\n                content: \"Nintendo 64\"\r\n            },\r\n            {\r\n                type: \"Sony\",\r\n                content: \"Playstation 1\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which of these racing franchises would you prefer to play a game from?\",\r\n        answers: [\r\n            {\r\n                type: \"Microsoft\",\r\n                content: \"Forza\"\r\n            },\r\n            {\r\n                type: \"Nintendo\",\r\n                content: \"Mario Kart\"\r\n            },\r\n            {\r\n                type: \"Sony\",\r\n                content: \"Gran Turismo\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Which of these games do you think is best?\",\r\n        answers: [\r\n            {\r\n                type: \"Microsoft\",\r\n                content: \"BioShock\"\r\n            },\r\n            {\r\n                type: \"Nintendo\",\r\n                content: \"The Legend of Zelda: Ocarina of Time\"\r\n            },\r\n            {\r\n                type: \"Sony\",\r\n                content: \"Final Fantasy VII\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"What console would you prefer to own?\",\r\n        answers: [\r\n            {\r\n                type: \"Microsoft\",\r\n                content: \"X-Box One\"\r\n            },\r\n            {\r\n                type: \"Nintendo\",\r\n                content: \"Wii U\"\r\n            },\r\n            {\r\n                type: \"Sony\",\r\n                content: \"Playstation 4\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport default quizQuestions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n    return <h2 className=\"question\">{props.content}</h2>;\r\n}\r\n\r\nQuestion.propTypes = {\r\n    content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction QuestionCount(props) {\r\n    return (\r\n        <div className=\"questionCount\">\r\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nQuestionCount.propTypes = {\r\n    counter: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired\r\n};\r\n\r\nexport default QuestionCount;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n    return (\r\n        <li className=\"answerOption\">\r\n            <input\r\n                type=\"radio\"\r\n                className=\"radioCustomButton\"\r\n                name=\"radioGroup\"\r\n                checked={props.answerType === props.answer}\r\n                id={props.answerType}\r\n                value={props.answerType}\r\n                disabled={props.answer}\r\n                onChange={props.onAnswerSelected}\r\n            />\r\n            <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n                {props.answerContent}\r\n            </label>\r\n        </li>\r\n    );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n    answerType: PropTypes.string.isRequired,\r\n    answerContent: PropTypes.string.isRequired,\r\n    answer: PropTypes.string.isRequired,\r\n    onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Transition } from 'react-transition-group';\r\nimport Question from '../components/Question';\r\nimport QuestionCount from '../components/QuestionCount';\r\nimport AnswerOption from '../components/AnswerOption';\r\n\r\nfunction Quiz(props) {\r\n    function renderAnswerOptions(key) {\r\n        return (\r\n            <AnswerOption\r\n                key={key.content}\r\n                answerContent={key.content}\r\n                answerType={key.type}\r\n                answer={props.answer}\r\n                questionId={props.questionId}\r\n                onAnswerSelected={props.onAnswerSelected}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Transition\r\n            className=\"container fade\"\r\n            component=\"div\"\r\n            timeout={500}\r\n        >\r\n            <div key={props.questionId}>\r\n                <QuestionCount counter={props.questionId} total={props.questionTotal} />\r\n                <Question content={props.question} />\r\n                <ul className=\"answerOptions\">\r\n                    {props.answerOptions.map(renderAnswerOptions)}\r\n                </ul>\r\n            </div>\r\n        </Transition>\r\n    );\r\n}\r\n\r\nQuiz.propTypes = {\r\n    answer: PropTypes.string.isRequired,\r\n    answerOptions: PropTypes.array.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n    questionId: PropTypes.number.isRequired,\r\n    questionTotal: PropTypes.number.isRequired,\r\n    onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nfunction Result(props) {\r\n    return (\r\n        <CSSTransition\r\n            className=\"container result fade-appear-done\"\r\n            component=\"div\"\r\n            timeout={200}\r\n        >\r\n            <div>\r\n                You prefer <strong>{props.quizResult}</strong>!\r\n      </div>\r\n        </CSSTransition>\r\n    );\r\n}\r\n\r\nResult.propTypes = {\r\n    quizResult: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Quiz</h2>\n          <h3 className=\"App-subheader\">Answer the questions below and the quiz will decide whether you prefer Sony, Microsoft or Nintendo!</h3>\n        </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}